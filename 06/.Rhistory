instruction <- paste0("111", comptbl[comptbl[,1]==cmp,2],
desttbl[desttbl[,1]==dst,2], jumptbl[jumptbl[,1]==jmp,2])
instruction <-substr(paste(rev(as.integer(intToBits(as.integer("63")))), collapse=""),17,32)
?rep
?write.table
write.table(comptbl[,1],"nw")
write.table(comptbl[,1],"nw",quote = FALSE,row.names = FALSE,col.names = FALSE)
View(comptbl)
comptbl[,1]
comptbl[,1] <- sub(" ","",comptbl[,1])
comptbl[,1]
write.table(comptbl[,1],"nw",quote = FALSE,row.names = FALSE,col.names = FALSE)
source('~/Assembler.R')
Assembler("Add.asm")
source('~/Assembler.R')
Assembler("Add.asm")
fname="Add.asm"
source('~/Assembler.R')
source('~/Assembler.R')
ln2 <- strsplit("A","=")
ln2
?strsplit
ln2 <- unlist(strsplit("A","="))
ln2
ln2 <- unlist(strsplit("A=M","="))
source('~/Assembler.R')
fname <- "Max.asm"
source('~/Assembler.R')
fname <- "Pong.asm"
source('~/Assembler.R')
close(fhand)
source('~/Assembler.R')
fname <- "PongL.asm"
source('~/Assembler.R')
fname <- "Add.asm"
source('~/Assembler.R')
grep("^[0-9]","11")
grep("^[0-9]","ab")
source('~/Assembler.R')
grep("^[0-9]","1122")
source('~/Assembler.R')
fname <-"Max.asm"
source('~/Assembler.R')
save("jumptbl","desttbl","comptbl","symboltbl",file = "assembletable.RData")
rm(list = ls())
load("assembletable.RData")
fname <- "Max.asm"
source('~/Assembler.R')
source('~/Assembler.R')
addlabel <- function(index, lines) {
lbls <-lines[index]
lb <- substr(lbls, 2, nchar(lbls)-1)
extraidx <- 1:length(index) - 1
tableidx <- index - extraidx
labeltable <- data.frame(lb, tableidx)
names(labeltable) <- names(symboltbl)
rbind(symboltbl, labeltable)
}
addvariable <- function(lb,idx,symboltable){
newvariable <- data.frame(lb,idx)
names(newvariable) <- stname
rbind(symboltable,newvariable)
}
source('~/Assembler.R')
View(symboltable)
grepl("@",lt)
addlabel <- function(index, lines) {
lbls <-lines[index]
lb <- substr(lbls, 2, nchar(lbls)-1)
extraidx <- 1:length(index) - 2
tableidx <- index - extraidx
labeltable <- data.frame(lb, tableidx)
names(labeltable) <- names(symboltbl)
rbind(symboltbl, labeltable)
}
source('~/Assembler.R')
addlabel <- function(index, lines) {
lbls <-lines[index]
lb <- substr(lbls, 2, nchar(lbls)-1)
extraidx <- 1:length(index)
tableidx <- index - extraidx
labeltable <- data.frame(lb, tableidx)
names(labeltable) <- names(symboltbl)
rbind(symboltbl, labeltable)
}
source('~/Assembler.R')
fname <- "MaxL.asm"
source('~/Assembler.R')
source('~/Assembler.R')
source('~/Assembler.R')
Assembler("Rect.asm")
Assembler("RectL.asm")
Assembler("Pong.asm")
Assembler("PongL.asm")
View(symboltable)
install.packages("swirl")
library(installr)
updateR()
install.packages("installr")
library(installr)
updateR()
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl::install_course("Exploratory Data Analysis")
swirl::install_course()
swirl()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind, airquality,pch=8,col="red",main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, airquality, layout=c(5,1))
p <- xyplot(Ozne~Wind, data=airquality)
p <- xyplot(Ozone~Wind, data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
f
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
source("plot1.R", local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local = TRUE)
str(diamonds)
diamonds$color
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLables.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local = TRUE)
xyplot(price~carat | color*cut, data = diamonds,strip = FALSE, pch=20, xlab=myxlab,ylab = myylab,main=mymain)
xyplot(price~carat | color*cut, data = diamonds, pch=20, xlab=myxlab,ylab = myylab,main=mymain)
swirl()
rm(list = ls())
swirl()
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
oxCC
0xCC
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(vocano,col = pal(20))
data(vocano)
image(Volcano,col = pal(20))
data("volcano")
image(Volcano,col = pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
?image
View(volcano)
cols
showMe(cols)
pal(20)
showMe(pal(20))
library(RColorBrewer)
brewer.pal(3,"BuGn")
?brewer.pal
x <- 10*(1:nrow(volcano))
y <- 10*(1:ncol(volcano))
image(x, y, volcano, col = terrain.colors(100), axes = FALSE)
?rgb
?colorRamp
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
brewer.pal.info
library(swirl)
swirl()
skip()
skip()
skip()
skip()
info()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
?brewer.pal
brewer.pal.info
mode(volcano)
as.integer(" ")
5%3
5%%3
rl <- readline("set rl:")
rl <- readline("set rl:")
f <- function(x) { x^2 }
curve(f,0,2)
polygon(c(1,2,3,4),c(2,4,8,7))
polygon(c(1,2,3,4),c(2,4,8,7))
plot(c(1,2,3,4),c(2,4,8,7),type = "n")
polygon(c(1,2,3,4),c(2,4,8,7))
?lowess
substitute(f)
?substitute
?is.name
seq.int(5,10,length.out = 101)
dev.cur()
dev.list()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
makecov(3,4)
library(lattice)
a <- 1:10
b <- 15
b <- 1:15
eg <- expand.grid(x=a,y=b)
View(eg)
class(eg)
?expand.grid
View(eg)
eg$z <- eg$x^2 eg$x*eg$y
eg$z <- eg$x^2+eg$x*eg$y
wireframe(z~x+y,eg)
debug(makecov)
makecov(0.5,4)
makecov(0.5,4)
m
source('~/.active-rstudio-document')
undebug(makecov)
makecov(0.5,4)
library(swirl)
swirl()
install.packages("fields")
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames,"|",fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(xo)
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(xo,x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1 <0
sum(negative,na.rm = TRUE)
mean(negative,na.rm = TRUE)
dates <- pm1$Date
str(dates   )
dates <- as.Date(as.character(dates),"#Y%m%d")
dates <- as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
intersect(site0,site1)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0,State.Code ==36 & county.site %in% both)
View(pm0)
cnt1 <- subset(pm1,State.Code ==36 & county.site %in% both)
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cnt1,cnt0$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub <- subset(cnt0,County.Code==63 & Site.ID == 2008)
pm1sub <- subset(cnt1,County.Code==63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(pm0sub$Date, %Y%m%d)
dates0 <- as.Date(pm0sub$Date, "%Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(h=median(x0sub,na.rm = TRUE),lwd=2)
plot(dates1,x1sub,pch=20)
abline(h=median(x1sub,na.rm = TRUE),lwd=2)
rng <- range(x0sub,x1sub,na.rm = TRUE)
rng
with(pm0,tapply(Sample.Value,Sate.Code,mean,na.rm=TRUE))
with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
mn0 <- with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
play()
range(c(1,5),c(2,6))
range(c(1,5),c(2,6),9)
nxt()
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0),mean=mn0)
d1 <- data.frame(state=names(mn1),mean=mn1)
mrg <- merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52),mrg[,2],xlim = c(.5,2.5)))
with(mrg,points(rep(2,52),mrg[,3]))
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
View(mrg)
m <- matrix(1:9,nrow = 3)
apply(m,1,which.min)
apply(m,1,scale)
m
m[1,] <- c(0,2,6)
m
apply(m,1,scale)
View(showMe)
combn(3,4)
combn(3,2)
?combn
combn(3,3)
combn(3,1)
?outer
outer(c(1,2),c(2,3))
outer(c(1,2,3),c(2,3,4))
?lower.tri
(m2 <- matrix(1:20, 4, 5))
lower.tri(m2)
upper.tri(m2)
pwd
getwd()
dir()
outer(1:100,1:3,"^")
z <- 1:10000000
system.time(z[3] <- 8)
system.time(z[33] <- 8)
system.time(z[35] <- 8)
system.time(z[35] <- 4)
tracemem(z)
system.time(z[35] <- 10)
system.time(z[35] <- 10)
system.time(z[35] <- 11)
setwd("C:/Users/Administrator/Desktop/nand2tetris/projects/06")
dirname(parent.frame(2)$ofile)
load("assembletable.RData")
setwd("C:/Users/Administrator/Desktop/nand2tetris/projects/06")
load("assembletable.RData")
View(symboltbl)
View(comptbl)
View(desttbl)
View(jumptbl)
source('C:/Users/Administrator/Desktop/nand2tetris/projects/06/Assembler.R')
Assembler("./add/Add.asm")
fname <- "./add/Add.asm"
library(stringr)
fhand <- file(fname)
lines <- readLines(fhand)
lwc <- sub("//(.*)", "", lines)  #lwc means line without comment
lwc <- str_trim(lwc)
lt <- lwc[nchar(lwc)>0]          #lt means line trimmed
lbidx <- grep("^\\(", lt)
if (length(lbidx)==0){
lwol <- lt
} else{
lwol <- lt[-lbidx]               #line without labels
}
symboltable <- addlabel(lbidx, lt)
ramad = 16
i=1
stname <- names(symboltable)
binarycode <- rep(NA, times=length(lwol))
for (ln in lwol) {
if(substr(ln,1,1)=="@"){
lb <- sub("@","",ln)
if (grepl("^[0-9]",lb)) {
address <- lb
} else {
idx <- which(symboltable$Label==lb)
if(length(idx)==0){
symboltable <- addvariable(lb,ramad,symboltable)
address <- ramad
ramad = ramad + 1
} else {
address <- symboltable[idx,2]
}
}
instruction <-substr(paste(rev(as.integer(intToBits(as.integer(address)))), collapse=""),17,32)
} else {
if(grepl("=",ln)){
ln2 <- unlist(strsplit(ln,"="))
dst <- ln2[1]
cj <- ln2[2]
} else{
dst <- "null"
cj <- ln
}
if(grepl(";",cj)){
cj2<- unlist(strsplit(cj,";"))
cmp <- cj2[1]
jmp <- cj2[2]
} else{
cmp <- cj
jmp <- "null"
}
instruction <- paste0("111", comptbl[comptbl[,1]==cmp,2],
desttbl[desttbl[,1]==dst,2], jumptbl[jumptbl[,1]==jmp,2])
}
binarycode[i] <- instruction
i = i+1
}
codename <-sub("asm","hack",fname)
write.table(binarycode,codename,quote = FALSE,row.names = FALSE,col.names = FALSE)
close(fhand)
View(symboltable)
fname <- "./pong/Pong.asm"
library(stringr)
fhand <- file(fname)
lines <- readLines(fhand)
lwc <- sub("//(.*)", "", lines)  #lwc means line without comment
lwc <- str_trim(lwc)
lt <- lwc[nchar(lwc)>0]          #lt means line trimmed
lbidx <- grep("^\\(", lt)
if (length(lbidx)==0){
lwol <- lt
} else{
lwol <- lt[-lbidx]               #line without labels
}
symboltable <- addlabel(lbidx, lt)
ramad = 16
i=1
stname <- names(symboltable)
binarycode <- rep(NA, times=length(lwol))
for (ln in lwol) {
if(substr(ln,1,1)=="@"){
lb <- sub("@","",ln)
if (grepl("^[0-9]",lb)) {
address <- lb
} else {
idx <- which(symboltable$Label==lb)
if(length(idx)==0){
symboltable <- addvariable(lb,ramad,symboltable)
address <- ramad
ramad = ramad + 1
} else {
address <- symboltable[idx,2]
}
}
instruction <-substr(paste(rev(as.integer(intToBits(as.integer(address)))), collapse=""),17,32)
} else {
if(grepl("=",ln)){
ln2 <- unlist(strsplit(ln,"="))
dst <- ln2[1]
cj <- ln2[2]
} else{
dst <- "null"
cj <- ln
}
if(grepl(";",cj)){
cj2<- unlist(strsplit(cj,";"))
cmp <- cj2[1]
jmp <- cj2[2]
} else{
cmp <- cj
jmp <- "null"
}
instruction <- paste0("111", comptbl[comptbl[,1]==cmp,2],
desttbl[desttbl[,1]==dst,2], jumptbl[jumptbl[,1]==jmp,2])
}
binarycode[i] <- instruction
i = i+1
}
codename <-sub("asm","hack",fname)
write.table(binarycode,codename,quote = FALSE,row.names = FALSE,col.names = FALSE)
close(fhand)
View(symboltable)
