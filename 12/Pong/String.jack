// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int max;
    field Array str;
    field int length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(0);              // need error message
        } 
        if (maxLength > 0) {
            let str = Array.new(maxLength);
        }
        let length = 0;
        let max = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (max > 0) {
            do Memory.deAlloc(str);         // may use Memory.deAlloc
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return  str[j];                  // may need some conditions
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;                 // may need some conditions
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (max > length) {
            let str[length] = c;
            let length = length + 1;
        }
        else {
            do Sys.error(1);          // need error message
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length] = 0;
        let length = length - 1;       // may need to check conditions
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value;
        var int i;
        var int neg;
        let i = 0;
        let value = 0;
        let neg = 1;
        if (str[i] = 45) {
            let i= i+1;
            let neg = -1;
        }
        while ( i < length) {  
            let value = (value * 10) + (str[i] - 48);   // may need to check chars
            let i = i+1;
        }
        return value*neg;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int tail;
        var int remain;
        let remain = val/10; 
        let tail = val-(remain*10);
        if (val < 0) {
            if (val > -10) {
                let str[0] = 45;
                let str[1] = 48 - val;
                let length = 2;
                }
            else {
                do setInt(remain);
                do appendChar(48-tail);
            }
        }
        else {
            if (val < 10) {
                let str[0] = val + 48;
                let length = 1;
                }

            else {
                do setInt(remain);
                do appendChar(tail+48);
            }
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
