// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bitPower;
    /** Initializes the library. */
    function void init() {
        var int i;
        var int value;
        let bitPower = Array.new(16);
        let i = 0;
        let value = 1;
        while (i < 16) {
            let bitPower[i] = value;
            let value = value + value;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        else {
            return x;
        }
    }
    
    /** Returns the ith bit of a number*/
    function boolean bit (int x, int i) {
        return ~((x & bitPower[i]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int result;
        var int shifted;
        var int i;
        let i = 0;
        let shifted = x;
        let result = 0;
        while (i < 16) {
            if (Math.bit(y,i)) {
                let result = result + shifted;
            }
            let shifted = shifted + shifted;
            let i = i + 1;
        }
        return result;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int temp;
        var int sign;
        var int result;
        let sign = 1;
        // if (x<0) {
            // let sign = -1;
            // let x = -x;
        // }
        // if (y<0) {
            // let sign = -sign;
            // let y = -y;
        // }
        if (x < y) {
            return 0;
        }
        let temp = 0;//Math.divide(x,y+y);
        let result = temp + temp;
        if ((x-y)<(result*y)) {
            return result;
        } 
        else {
            return result + 1ï¼›
        }
        // if (sign = 1) {
            // return result;
        // } 
        // else {
            // return -result;
        // }
        //return;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i;
        var int y;
        var int temp;
        let i = 7;
        let y = 0;
        while (i > -1 ) {
            let temp = y+bitPower[i];
            if ( (~((temp*temp) > x))&(temp < 182)) {
                let y = temp;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a>b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a<b) {
            return a;
        }
        return b;
    }
}
